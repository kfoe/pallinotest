{"stats":{"totalMutantsCount":4,"killedCount":1,"notCoveredCount":0,"escapedCount":3,"errorCount":0,"syntaxErrorCount":0,"skippedCount":0,"ignoredCount":0,"timeOutCount":0,"msi":25,"mutationCodeCoverage":100,"coveredCodeMsi":25},"escaped":[{"mutator":{"mutatorName":"TrueValue","originalSourceCode":"<?php\n\nnamespace App\\Importer;\n\nuse Psr\\Log\\LoggerInterface;\nuse Illuminate\\Support\\Facades\\DB;\nuse App\\Downloader\\OfferDownloader;\nuse App\\Importer\\Contracts\\Importer;\nuse App\\Services\\Contracts\\ShopService;\nuse App\\Downloader\\Dtos\\DownloadedOffer;\nuse App\\Services\\Contracts\\OfferService;\nuse App\\Downloader\\Parsers\\OfferDownloaderParser;\nclass OfferImporter implements Importer\n{\n    public function __construct(private readonly OfferDownloader $offerDownloader, private readonly OfferDownloaderParser $offerDownloaderParser, private readonly OfferService $offerService, private readonly ShopService $shopService, private readonly LoggerInterface $logger)\n    {\n    }\n    public function import(): bool\n    {\n        $downloadedOffers = $this->offerDownloader->download();\n        $parsedDownloadedOffers = $this->offerDownloaderParser->parse($downloadedOffers);\n        DB::transaction(function () use ($parsedDownloadedOffers) {\n            \/* @var DownloadedOffer $parsedDownloadedOffer *\/\n            foreach ($parsedDownloadedOffers as $parsedDownloadedOffer) {\n                $this->upsert($parsedDownloadedOffer);\n            }\n        });\n        return true;\n    }\n    private function upsert(DownloadedOffer $downloadedOffer): void\n    {\n        if ($offer = $this->offerService->findByExternalId($downloadedOffer->externalId)) {\n            $this->offerService->update($offer, $downloadedOffer->toArray());\n            $this->logger->info(__('Offer updated.'), ['external_id' => $downloadedOffer->externalId]);\n        } elseif ($shop = $this->shopService->findByExternalId($downloadedOffer->externalShopId)) {\n            $this->offerService->create($shop, $downloadedOffer->toArray());\n            $this->logger->info(__('Offer created.'), ['external_id' => $downloadedOffer->externalId]);\n        } else {\n            $this->logger->warning(__('Shop not found for offer.'), ['external_shop_id' => $downloadedOffer->externalShopId]);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Importer;\n\nuse Psr\\Log\\LoggerInterface;\nuse Illuminate\\Support\\Facades\\DB;\nuse App\\Downloader\\OfferDownloader;\nuse App\\Importer\\Contracts\\Importer;\nuse App\\Services\\Contracts\\ShopService;\nuse App\\Downloader\\Dtos\\DownloadedOffer;\nuse App\\Services\\Contracts\\OfferService;\nuse App\\Downloader\\Parsers\\OfferDownloaderParser;\nclass OfferImporter implements Importer\n{\n    public function __construct(private readonly OfferDownloader $offerDownloader, private readonly OfferDownloaderParser $offerDownloaderParser, private readonly OfferService $offerService, private readonly ShopService $shopService, private readonly LoggerInterface $logger)\n    {\n    }\n    public function import(): bool\n    {\n        $downloadedOffers = $this->offerDownloader->download();\n        $parsedDownloadedOffers = $this->offerDownloaderParser->parse($downloadedOffers);\n        DB::transaction(function () use ($parsedDownloadedOffers) {\n            \/* @var DownloadedOffer $parsedDownloadedOffer *\/\n            foreach ($parsedDownloadedOffers as $parsedDownloadedOffer) {\n                $this->upsert($parsedDownloadedOffer);\n            }\n        });\n        return false;\n    }\n    private function upsert(DownloadedOffer $downloadedOffer): void\n    {\n        if ($offer = $this->offerService->findByExternalId($downloadedOffer->externalId)) {\n            $this->offerService->update($offer, $downloadedOffer->toArray());\n            $this->logger->info(__('Offer updated.'), ['external_id' => $downloadedOffer->externalId]);\n        } elseif ($shop = $this->shopService->findByExternalId($downloadedOffer->externalShopId)) {\n            $this->offerService->create($shop, $downloadedOffer->toArray());\n            $this->logger->info(__('Offer created.'), ['external_id' => $downloadedOffer->externalId]);\n        } else {\n            $this->logger->warning(__('Shop not found for offer.'), ['external_shop_id' => $downloadedOffer->externalShopId]);\n        }\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Importer\/OfferImporter.php","originalStartLine":36},"diff":"@@ @@\n                 $this->upsert($parsedDownloadedOffer);\n             }\n         });\n-        return true;\n+        return false;\n     }\n     private function upsert(DownloadedOffer $downloadedOffer): void\n     {","processOutput":"PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.24\nConfiguration: \/tmp\/infection\/phpunitConfiguration.81272475e63c92f8dbbb5a23a9a7eac6.infection.xml\n\n...                                                                 3 \/ 3 (100%)\n\nTime: 00:01.071, Memory: 40.50 MB\n\nOK (3 tests, 21 assertions)"},{"mutator":{"mutatorName":"TrueValue","originalSourceCode":"<?php\n\nnamespace App\\Importer;\n\nuse Psr\\Log\\LoggerInterface;\nuse App\\Downloader\\ShopDownloader;\nuse Illuminate\\Support\\Facades\\DB;\nuse App\\Importer\\Contracts\\Importer;\nuse App\\Downloader\\Dtos\\DownloadedShop;\nuse App\\Services\\Contracts\\ShopService;\nuse App\\Downloader\\Parsers\\ShopDownloaderParser;\nclass ShopImporter implements Importer\n{\n    public function __construct(private readonly ShopDownloader $shopDownloader, private readonly ShopDownloaderParser $shopDownloaderParser, private readonly ShopService $shopService, private readonly LoggerInterface $logger)\n    {\n    }\n    public function import(): bool\n    {\n        $downloadedShops = $this->shopDownloader->download();\n        $parsedDownloadedShops = $this->shopDownloaderParser->parse($downloadedShops);\n        DB::transaction(function () use ($parsedDownloadedShops) {\n            \/* @var DownloadedShop $parsedDownloadedShop *\/\n            foreach ($parsedDownloadedShops as $parsedDownloadedShop) {\n                $this->upsert($parsedDownloadedShop);\n            }\n        });\n        return true;\n    }\n    private function upsert(DownloadedShop $downloadedShop): void\n    {\n        if ($shop = $this->shopService->findByExternalId($downloadedShop->externalId)) {\n            $this->shopService->update($shop, $downloadedShop->toArray());\n            $this->logger->info(__('Shop updated.'), ['external_id' => $downloadedShop->externalId]);\n        } else {\n            $this->shopService->create($downloadedShop->toArray());\n            $this->logger->info(__('Shop created.'), ['external_id' => $downloadedShop->externalId]);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Importer;\n\nuse Psr\\Log\\LoggerInterface;\nuse App\\Downloader\\ShopDownloader;\nuse Illuminate\\Support\\Facades\\DB;\nuse App\\Importer\\Contracts\\Importer;\nuse App\\Downloader\\Dtos\\DownloadedShop;\nuse App\\Services\\Contracts\\ShopService;\nuse App\\Downloader\\Parsers\\ShopDownloaderParser;\nclass ShopImporter implements Importer\n{\n    public function __construct(private readonly ShopDownloader $shopDownloader, private readonly ShopDownloaderParser $shopDownloaderParser, private readonly ShopService $shopService, private readonly LoggerInterface $logger)\n    {\n    }\n    public function import(): bool\n    {\n        $downloadedShops = $this->shopDownloader->download();\n        $parsedDownloadedShops = $this->shopDownloaderParser->parse($downloadedShops);\n        DB::transaction(function () use ($parsedDownloadedShops) {\n            \/* @var DownloadedShop $parsedDownloadedShop *\/\n            foreach ($parsedDownloadedShops as $parsedDownloadedShop) {\n                $this->upsert($parsedDownloadedShop);\n            }\n        });\n        return false;\n    }\n    private function upsert(DownloadedShop $downloadedShop): void\n    {\n        if ($shop = $this->shopService->findByExternalId($downloadedShop->externalId)) {\n            $this->shopService->update($shop, $downloadedShop->toArray());\n            $this->logger->info(__('Shop updated.'), ['external_id' => $downloadedShop->externalId]);\n        } else {\n            $this->shopService->create($downloadedShop->toArray());\n            $this->logger->info(__('Shop created.'), ['external_id' => $downloadedShop->externalId]);\n        }\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Importer\/ShopImporter.php","originalStartLine":36},"diff":"@@ @@\n                 $this->upsert($parsedDownloadedShop);\n             }\n         });\n-        return true;\n+        return false;\n     }\n     private function upsert(DownloadedShop $downloadedShop): void\n     {","processOutput":"PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.24\nConfiguration: \/tmp\/infection\/phpunitConfiguration.95904cbb11cba207680d74445ff7d516.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:01.163, Memory: 40.50 MB\n\nOK (2 tests, 12 assertions)"},{"mutator":{"mutatorName":"FalseValue","originalSourceCode":"<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Event;\nuse Illuminate\\Auth\\Events\\Registered;\nuse Illuminate\\Auth\\Listeners\\SendEmailVerificationNotification;\nuse Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\nclass EventServiceProvider extends ServiceProvider\n{\n    \/**\n     * The event to listener mappings for the application.\n     *\n     * @var array<class-string, array<int, class-string>>\n     *\/\n    protected $listen = [Registered::class => [SendEmailVerificationNotification::class]];\n    \/**\n     * Register any events for your application.\n     *\/\n    public function boot(): void\n    {\n    }\n    \/**\n     * Determine if events and listeners should be automatically discovered.\n     *\/\n    public function shouldDiscoverEvents(): bool\n    {\n        return false;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Event;\nuse Illuminate\\Auth\\Events\\Registered;\nuse Illuminate\\Auth\\Listeners\\SendEmailVerificationNotification;\nuse Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\nclass EventServiceProvider extends ServiceProvider\n{\n    \/**\n     * The event to listener mappings for the application.\n     *\n     * @var array<class-string, array<int, class-string>>\n     *\/\n    protected $listen = [Registered::class => [SendEmailVerificationNotification::class]];\n    \/**\n     * Register any events for your application.\n     *\/\n    public function boot(): void\n    {\n    }\n    \/**\n     * Determine if events and listeners should be automatically discovered.\n     *\/\n    public function shouldDiscoverEvents(): bool\n    {\n        return true;\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Providers\/EventServiceProvider.php","originalStartLine":33},"diff":"@@ @@\n      *\/\n     public function shouldDiscoverEvents(): bool\n     {\n-        return false;\n+        return true;\n     }\n }","processOutput":"PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.24\nConfiguration: \/tmp\/infection\/phpunitConfiguration.74b8e5745dd7d972438eaa241a6da028.infection.xml\n\n...............................................                   47 \/ 47 (100%)\n\nTime: 00:01.842, Memory: 48.50 MB\n\nOK (47 tests, 124 assertions)"}],"timeouted":[],"killed":[{"mutator":{"mutatorName":"FalseValue","originalSourceCode":"<?php\n\nnamespace App\\Downloader\\Strategies;\n\nuse League\\Csv\\Reader;\nuse GuzzleHttp\\ClientInterface;\nuse GuzzleHttp\\Exception\\RequestException;\nuse App\\Downloader\\Contracts\\DownloadStrategy;\nclass CsvDownloadStrategy implements DownloadStrategy\n{\n    public function __construct(private readonly ClientInterface $client)\n    {\n    }\n    public function download(string $url): array\n    {\n        try {\n            $response = $this->client->get($url);\n            $csv = Reader::createFromString($response->getBody()->getContents());\n            $csv->setHeaderOffset(0);\n            return iterator_to_array($csv, false);\n        } catch (RequestException $e) {\n            throw new \\RuntimeException('Request Error: ' . $e->getMessage());\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Downloader\\Strategies;\n\nuse League\\Csv\\Reader;\nuse GuzzleHttp\\ClientInterface;\nuse GuzzleHttp\\Exception\\RequestException;\nuse App\\Downloader\\Contracts\\DownloadStrategy;\nclass CsvDownloadStrategy implements DownloadStrategy\n{\n    public function __construct(private readonly ClientInterface $client)\n    {\n    }\n    public function download(string $url): array\n    {\n        try {\n            $response = $this->client->get($url);\n            $csv = Reader::createFromString($response->getBody()->getContents());\n            $csv->setHeaderOffset(0);\n            return iterator_to_array($csv, true);\n        } catch (RequestException $e) {\n            throw new \\RuntimeException('Request Error: ' . $e->getMessage());\n        }\n    }\n}","originalFilePath":"\/var\/www\/html\/app\/Downloader\/Strategies\/CsvDownloadStrategy.php","originalStartLine":22},"diff":"@@ @@\n             $response = $this->client->get($url);\n             $csv = Reader::createFromString($response->getBody()->getContents());\n             $csv->setHeaderOffset(0);\n-            return iterator_to_array($csv, false);\n+            return iterator_to_array($csv, true);\n         } catch (RequestException $e) {\n             throw new \\RuntimeException('Request Error: ' . $e->getMessage());\n         }\n     }\n }","processOutput":"PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.24\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7904af1b8dc06906ff987efeac7e5845.infection.xml\n\nF\n\nTime: 00:00.186, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) Tests\\Unit\\Downloader\\Strategies\\CsvDownloadStrategyTest::testSuccessDownload\nFailed asserting that two arrays are identical.\n--- Expected\n+++ Actual\n@@ @@\n Array &0 [\n-    0 => Array &1 [\n+    1 => Array &1 [\n         'id' => '1',\n         'name' => 'Foo',\n     ],\n-    1 => Array &2 [\n+    2 => Array &2 [\n         'id' => '2',\n         'name' => 'Bar',\n     ],\n ]\n\n\/var\/www\/html\/tests\/Unit\/Downloader\/Strategies\/CsvDownloadStrategyTest.php:36\n\/var\/www\/html\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Testing\/TestCase.php:61\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."}],"errored":[],"syntaxErrors":[],"uncovered":[],"ignored":[]}